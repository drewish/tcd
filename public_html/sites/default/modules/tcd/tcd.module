<?php
/**
 * @file
 * Code for the tcd feature.
 */

include_once('tcd.features.inc');


/**
 * Implement hook_node_view().
 */
function tcd_menu() {
  $items['api/follow'] = array(
    'page callback' => 'tcd_follow_json',
    'delivery callback' => 'tcd_ajax_deliver',
    'access callback' => true,
  );
  $items['api/add_tweets'] = array(
    'page callback' => 'tcd_add_tweets_json',
    'delivery callback' => 'tcd_ajax_deliver',
    'access callback' => true,
  );
  return $items;
}

/**
 * Custom delivery callback.
 */
function tcd_ajax_deliver($json) {
  if (is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'application/json; charset=utf-8');
  }
  print $json;
  ajax_footer();
}

function tcd_follow_json() {
  $follows = array();
  foreach (node_load_multiple(array(), array('type' => 'site')) as $node) {
    $follows[$node->nid] = array(
      'screen_names' => preg_split("/[\s,]+/", $node->field_twitter_user['und'][0]['value']),
      'last_modified' => $node->changed,
      'hash_tag' => $node->field_twitter_tag['und'][0]['value']
    );
  }
  return drupal_json_encode($follows);
}

/**
 * Callback to write tweets to the database.
 *
 * @TODO add some authentication.
 */
function tcd_add_tweets_json() {
  $data = drupal_json_decode($_POST['json']);
  foreach ($data as $tweet) {
    db_merge('tcd_tweets')
      ->key(array(
        'twitter_id' => $tweet['tweet_id'],
        'site_nid' => $tweet['site_id']
      ))
      ->fields(array(
        'screen_name' => $tweet['screen_name'],
        'created_time' => $tweet['created_at'] / 1000,
        'text' => $tweet['text'],
      ))
      ->execute();
  }
  return drupal_json_encode(array('status' => 'cool', 'number' => count($data)));
}

function tcd_form_site_node_form_alter(&$form, &$form_state, $form_id) {
  $form['field_font_color']['#attached'] = array(
    // Add Farbtastic color picker.
    'library' => array(
      array('system', 'farbtastic'),
    ),
    // // Add custom CSS.
    // 'css' => array(
    //   $base . '/color.css' => array(),
    // ),
    // Add custom JavaScript.
    'js' => array(
      drupal_get_path('module', 'tcd') . '/tcd_edit.js',
    //   array(
    //     'data' => array(
    //       'color' => array(
    //         'reference' => color_get_palette($theme, TRUE),
    //         'schemes' => $schemes,
    //       ),
    //       'gradients' => $info['gradients'],
    //     ),
    //     'type' => 'setting',
    //   ),
    ),
  );
  $form['field_font_color']['#suffix'] = '<div id="colorpicker"></div>';
}

/**
 * Implement hook_node_view().
 */
function tcd_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'site') {
    $tweets = db_query_range('SELECT tt.* FROM {tcd_tweets} tt
      WHERE tt.site_nid = :nid ORDER BY tt.created_time DESC', 0, 100, array(':nid' => $node->nid))
      ->fetchAllAssoc('twitter_id', PDO::FETCH_ASSOC);
    // Pull the newest tweet or FALSE if it's an empty array.
    $newest_tweet = reset($tweets);

    // Add some basic default settings. We should also add some validation since some of these fields aren't required.
    $user_name = $node->field_twitter_user[LANGUAGE_NONE][0]['value'];
    $hash_tag = isset($node->field_twitter_tag[LANGUAGE_NONE][0]['value']) ? $node->field_twitter_tag[LANGUAGE_NONE][0]['value'] : '';
    $node->tweet_mode = $node->field_mode[LANGUAGE_NONE][0]['value'];

    $base = drupal_get_path('module', 'tcd');
    $settings = array('mode' => $node->tweet_mode);
    if ($node->tweet_mode == 'last') {
      drupal_add_js($base . '/socket.io.min.js');
      $node->tweet_field = $newest_tweet;
    }
    elseif ($node->tweet_mode == 'random') {
      $settings['tweets'] = array_values($tweets);
      $node->tweet_field = empty($tweets) ? FALSE : $tweets[array_rand($tweets)];
    }

    if (empty($node->tweet_field['text'])) {
      $node->tweet_field['text'] = t('Send me a tweet!');
    }

    drupal_add_js($base . '/tcd_tweets.js');
    drupal_add_js(array('twitter' => $settings), 'setting');

    // Kick out Open graph tags.
    if ('full' == $view_mode) {
      $tags = array(
        'og:title' => $node->title,
        'og:type' => 'website',
        'og:url' => url('node/' . $node->nid),
        'og:description' => empty($newest_tweet['text']) ? '' : $newest_tweet['text'],
      );
      foreach ($tags as $name => $content) {
        $element = array(
          '#tag' => 'meta',
          '#attributes' => array(
            'property' => $name,
            'content' => $content,
          ),
        );
        drupal_add_html_head($element, "opengraph_meta_$name");
      }
    }
  }
}

/**
 * Implement hook_node_delete().
 */
function tcd_node_delete($node) {
  db_query('DELETE FROM {tcd_tweets} WHERE site_nid = :nid', array(':nid' => $node->nid));
}

/**
 * Implements hook_form_alter().
 */
function tcd_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'site_node_form' && $form['type']['#value']) {
    $form['path']['#access'] = FALSE;
    $form['menu']['#access'] = FALSE;
    $form['comment_settings']['#access'] = FALSE;
    $form['field_color_background']['#access'] = FALSE;
    $form['field_font']['#access'] = FALSE;
    $form['field_font_color']['#access'] = FALSE;
    $form['language']['#access'] = FALSE;

    $form['revision_information']['#access'] = FALSE;

    $form['author']['#access'] = FALSE;
    $form['status']['#access'] = FALSE;

  }
}  
